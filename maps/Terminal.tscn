[gd_scene load_steps=3 format=2]

[ext_resource path="res://basicfont.tres" type="DynamicFont" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends CanvasLayer

# eventiually, this will be set externally
# and also allow read-only fields
var code = [
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
	[ops.NOP, 0x00, 0x00, 0x00],
]

var running = false
var line:int = 0
var pos:int = 0
var opmode = false

# locations of positions
var pos_locs = [36, 72, 96, 120, 196, 232, 256, 280]

# known ops
enum ops { NOP, JMP, SET, MOV, ADD, SUB, MUL, DIV, JEQ, JNE, JGT, JLT }
var op_keys = ops.keys()

# virtual machine registers
var registers = []

var oldtext = \"\"

# show position of cursor
func drawIndicators():
	if opmode:
		$iLine.color = Color('#46e50000')
		$iPos.color = Color('#46e50000')
	else:
		$iLine.color = Color('#4652e500')
		$iPos.color = Color('#4652e500')
	var l = line % 16
	var p = pos 
	if line > 15:
		p = pos + 4
	var y = 5 + (l * 9)
	var x = 5
	if p > 3:
		x = 165
	$iLine.set_position(Vector2(x, y))
	$iPos.set_position(Vector2(pos_locs[p] , y))
	$PlayIndicator.visible = running

func drawUI():
	var out = \"\"
	for i in range(16):
		out += \"[color=blue]%02X[/color] [color=green]%s[/color]  [color=yellow]%02X %02X %02X[/color]\\n\" % [i, op_keys[code[i][0]], code[i][1], code[i][2], code[i][3]]
	$InterfaceText1.bbcode_text = out
	out = \"\"
	for j in range(16):
		var i = j+16
		out += \"[color=blue]%02X[/color] [color=green]%s[/color]  [color=yellow]%02X %02X %02X[/color]\\n\" % [i, op_keys[code[i][0]], code[i][1], code[i][2], code[i][3]]
	$InterfaceText2.bbcode_text = out
	$instructions.text = \"\"
	if running:
		for n in registers:
			$instructions.text += \"%02X \" % n
	else:
		$instructions.text = oldtext

# Called when the node enters the scene tree for the first time.
func _ready():
	oldtext = $instructions.text
	# eventiually, this will be set externally
	registers = []
	for i in range(256):
		registers.append(0)
	drawUI()
	drawIndicators()

func _input(event):
	var do_update = false
	if not running:
		if opmode:
			var limit = 256
			if pos == 0:
				limit = len(op_keys)
			if event.is_action_pressed(\"ui_up\"):
				code[line][pos] = int(fposmod(code[line][pos]-1, limit))
				drawUI()
			if event.is_action_pressed(\"ui_down\"):
				code[line][pos] = int(fposmod(code[line][pos]+1, limit))
				drawUI()
		else:
			if event.is_action_pressed(\"ui_left\"):
				pos -= 1
				if pos < 0:
					pos = 3
					line = int(fposmod(line + 16, 32))
				do_update = true
			if event.is_action_pressed(\"ui_right\"):
				pos += 1
				if pos > 3:
					pos = 0
					line = int(fposmod(line + 16, 32))
				do_update = true
			if event.is_action_pressed(\"ui_up\"):
				line = int(fposmod(line-1, 32))
				do_update = true
			if event.is_action_pressed(\"ui_down\"):
				line = int(fposmod(line+1, 32))
				do_update = true
			if event.is_action_pressed(\"ui_select\"):
				running = true
				do_update = true
		
		if event.is_action_pressed(\"ui_accept\"):
			opmode = true
			do_update = true
		if event.is_action_released(\"ui_accept\"):
			opmode = false
			do_update = true
	else:
		if event.is_action_pressed(\"ui_select\"):
			running = false
			do_update = true
	if do_update:
		drawUI()
		drawIndicators()

var tick:int = 0

func _process(delta:float):
	# run this every 10 frames
	tick += 1
	if tick % 10 == 0:
		if running:
			var a = code[line][3]
			var b = code[line][2]
			var c = code[line][1]
			match code[line][0]:
				ops.NOP:
					pass
				ops.JMP: # unconditional jump
					line = a % 32
				ops.JEQ: # conditional jump: ==
					if registers[a] == registers[b]:
						line = c % 32
					else:
						line = int(fposmod(line+1, 32))
				ops.JNE: # conditional jump: !=
					if registers[a] != registers[b]:
						line = c % 32
					else:
						line = int(fposmod(line+1, 32))
				ops.JGT: # conditional jump: >
					if registers[a] > registers[b]:
						line = c % 32
					else:
						line = int(fposmod(line+1, 32))
				ops.JLT: # conditional jump: <
					if registers[a] > registers[b]:
						line = c % 32
					else:
						line = int(fposmod(line+1, 32))
				ops.SET: # set a register to a value
					registers[a] = b
					drawUI()
				ops.MOV: # copy a register to another
					registers[a] = registers[b]
					drawUI()
				ops.ADD: # add 2 registers
					registers[a] = int(fposmod(registers[a] + b, 256))
					drawUI()
				ops.SUB: # subtract a register from another register
					registers[a] = int(fposmod(registers[a] - b, 256))
					drawUI()
				ops.MUL: # multiply a register by another register
					registers[a] = int(fposmod(registers[a] * b, 256))
					drawUI()
				ops.DIV: # divide a register by another register
					registers[a] = int(fposmod(registers[a] / b, 256))
					drawUI()
				_:
					print(\"unimplemented op: %s\" % op_keys[code[line][0]])
			
			# if it's not a jump, move on to next line
			if code[line][0] != ops.JMP and code[line][0] != ops.JEQ and code[line][0] != ops.JNE and code[line][0] != ops.JGT and code[line][0] != ops.JLT:
				line = int(fposmod(line+1, 32))
			drawIndicators()

"

[node name="CanvasLayer" type="CanvasLayer"]
script = SubResource( 1 )

[node name="BG" type="ColorRect" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -0.396851
margin_top = 0.396851
margin_right = -0.396851
margin_bottom = 0.396851
color = Color( 0, 0, 0, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="InterfaceText1" type="RichTextLabel" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 13.0
margin_top = 6.0
margin_right = -164.0
margin_bottom = -86.0
custom_fonts/normal_font = ExtResource( 1 )
bbcode_enabled = true
scroll_active = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="InterfaceText2" type="RichTextLabel" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 173.168
margin_top = 5.7937
margin_right = -3.83157
margin_bottom = -86.2063
custom_fonts/normal_font = ExtResource( 1 )
bbcode_enabled = true
scroll_active = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="div-center" type="ColorRect" parent="."]
anchor_left = 0.5
anchor_right = 0.5
margin_left = -3.0
margin_right = 3.0
margin_bottom = 162.0
color = Color( 0.968627, 0.968627, 0.968627, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="div-bottom" type="ColorRect" parent="."]
margin_left = -0.412598
margin_top = 160.365
margin_right = 319.587
margin_bottom = 172.365
color = Color( 0.968627, 0.968627, 0.968627, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="iLine" type="ColorRect" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 165.0
margin_top = 5.0
margin_right = -5.0
margin_bottom = -225.0
color = Color( 0.321569, 0.898039, 0, 0.27451 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="iPos" type="ColorRect" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 280.0
margin_top = 5.0
margin_right = -15.0
margin_bottom = -226.0
color = Color( 0.898039, 0, 0, 0.27451 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="brand" type="RichTextLabel" parent="."]
margin_left = 2.15047
margin_top = 162.498
margin_right = 75.1505
margin_bottom = 171.498
rect_clip_content = false
custom_fonts/normal_font = ExtResource( 1 )
bbcode_enabled = true
bbcode_text = "[color=red]Pakémon[/color]
"
text = "Pakémon
"
scroll_active = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="instructions" type="RichTextLabel" parent="."]
margin_left = 4.0
margin_top = 179.0
margin_right = 316.0
margin_bottom = 235.0
rect_clip_content = false
custom_fonts/normal_font = ExtResource( 1 )
text = "Use directionals to select position.
Hold A to with directionsals to change.
Press SELECT to run/stop.
Press B to exit.
"
fit_content_height = true
scroll_active = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="PlayIndicator" type="Label" parent="."]
margin_left = 310.0
margin_top = 162.0
margin_right = 318.0
margin_bottom = 170.0
custom_fonts/font = ExtResource( 1 )
text = ">"
__meta__ = {
"_edit_use_anchors_": false
}
