[gd_scene load_steps=3 format=2]

[ext_resource path="res://basicfont.tres" type="DynamicFont" id=1]

[sub_resource type="GDScript" id=2]
script/source = "extends Node2D

# whenever a register chnages, this terminal call this
# alsom externally, it will set a register
signal set_register(register, value)

# use this externally to set code
signal set_code(code)

# use this to set the runnifg state
signal set_running(running)

# store the original text
onready var original_text = $instructions.bbcode_text

# the current code, parsed
var code = []

# number of lines in code
const line_count = 64

# every nth frame, CPU will tick
var speed = 10

var needs_help = false

# is it running?
var running = false

# entering data?
var entering = false

# current line/position
var line:int = 0
var pos:int = 0

var always_show_registers = false

# syn-hi: op = green, line = lime, number = white, register = yellow

# help-text for ops
const ops_help = {
	\"S\": \"[color=green]SET[/color]: [color=yellow]%s[/color] = [color=white]%02X[/color]\",
	\"M\": \"[color=green]MOVe[/color]: copy value [color=yellow]%s[/color] -> [color=yellow]%s[/color]\",
	\"+\": \"[color=green]ADD[/color]: [color=yellow]%s[/color] + [color=yellow]%s[/color]\",
	\"-\": \"[color=green]SUBtract[/color]: [color=yellow]%s[/color] - [color=yellow]%s[/color]\",
	\"*\": \"[color=green]MULtiply[/color]: [color=yellow]%s[/color] * [color=yellow]%s[/color]\",
	\"/\": \"[color=green]DIVide[/color]: [color=yellow]%s[/color] / [color=yellow]%s[/color]\",
	\"J\": \"[color=green]JuMP[/color] to line [color=lime]%02X[/color]\",
	\"=\": \"[color=green]Jump to line [color=lime]%02X[/color] if EQual[/color]: [color=yellow]%s[/color] == [color=yellow]%s[/color]\",
	\"!\": \"[color=green]Jump to line [color=lime]%02X[/color] if Not Equal[/color]: [color=yellow]%s[/color] != [color=yellow]%s[/color]\",
	\">\": \"[color=green]Jump to line [color=lime]%02X[/color] if Greater Than[/color]: [color=yellow]%s[/color] > [color=yellow]%s[/color]\",
	\"<\": \"[color=green]Jump to line [color=lime]%02X[/color] if Less Than[/color]: [color=yellow]%s[/color] < [color=yellow]%s[/color]\",
	\" \": \"[color=green]No OPeration[/color]: do nothing\"
}

# line-formatting for ops
const format = {
	\"S\": \"[color=yellow]%2s[/color] [color=white]%02X[/color]\",
	\"M\": \"[color=yellow]%2s[/color] [color=yellow]%2s[/color]\",
	\"+\": \"[color=yellow]%2s[/color] [color=yellow]%2s[/color]\",
	\"-\": \"[color=yellow]%2s[/color] [color=yellow]%2s[/color]\",
	\"*\": \"[color=yellow]%2s[/color] [color=yellow]%2s[/color]\",
	\"/\": \"[color=yellow]%2s[/color] [color=yellow]%2s[/color]\",
	\"J\": \"[color=lime]%02X[/color]\",
	\"=\": \"[color=lime]%02X[/color] [color=yellow]%2s[/color] [color=yellow]%2s[/color]\",
	\"!\": \"[color=lime]%02X[/color] [color=yellow]%2s[/color] [color=yellow]%2s[/color]\",
	\">\": \"[color=lime]%02X[/color] [color=yellow]%2s[/color] [color=yellow]%2s[/color]\",
	\"<\": \"[color=lime]%02X[/color] [color=yellow]%2s[/color] [color=yellow]%2s[/color]\",
	\" \": \"\"
}

var ops = format.keys()

# X-positions for indicator
var positions = [2, 20, 41, 62]

# make current state match what is on screen
func update_display():
	if len(code) < line_count:
		code.resize(line_count)
		for linenum in range(line_count):
			code[linenum] = [\" \", []]
	$PlayIndicator.visible = running
	$LineBar/PosBar.visible = not running
	$LineBar/PosBar.set_position(Vector2(positions[pos], 0))
	$LineIndicator.bbcode_text = \"[color=lime]%02X[/color]:%d\" % [line, pos]
	if entering:
		$LineBar.color = Color('#46e50000')
		$LineBar/PosBar.color = Color('#46e50000')
	else:
		$LineBar.color = Color('#4652e500')
		$LineBar/PosBar.color = Color('#4652e500')
	var lineY = ((line % 16) * 8) + 2
	var lineX = 0
	if line > 15:
		lineX += 79
	if line > 31:
		lineX += 79
	if line > 47:
		lineX += 79
	$LineBar.set_position(Vector2(lineX, lineY))
	var buckets = [$Code, $Code2, $Code3, $Code4]
	for b in buckets:
		b.bbcode_text = \"\"
	# split code into 4 buckets, color-code, and pad
	for linenum in range(line_count):
		var out = buckets[0]
		if linenum > 15 and linenum < 32:
			out = buckets[1]
		if linenum > 31 and linenum < 48:
			out = buckets[2]
		if linenum > 47:
			out = buckets[3]
		var l = code[linenum]
		var op = l[0]
		var params = l[1]
		out.bbcode_text += (\"[color=green]%s[/color] %s\\n\" % [op, format[op] % params])
	if running or always_show_registers:
		$instructions.bbcode_text = (\"%s\\n\\n\\n\\n\" % ops_help[code[line][0]]) % code[line][1]
		var keys = registers.keys()
		for r in range(keys.size()):
			if r % 5 == 4:
				$instructions.bbcode_text += \"[color=yellow]%s[/color]: %02X\\n\" % [keys[r], registers[ keys[r] ]]
			else:
				$instructions.bbcode_text += \"[color=yellow]%s[/color]: %02X \" % [keys[r], registers[ keys[r] ]]
	else:
		$instructions.bbcode_text = (\"%s%s\" % [(ops_help[code[line][0]]) % code[line][1], original_text])


# turn string code into a parsed array that is easy to manage and put in code var
# after this every element of code is a 4-length array with space-padded data in it
func set_code(code_text:String):
	code.clear()
	code.resize(line_count)
	var regex = RegEx.new()
	regex.compile(\"[G-Z]+\")
	var lines = code_text.split(\"\\n\")
	for linenum in range(line_count):
		if linenum < lines.size():
			var l = lines[linenum].strip_edges().split(\" \")
			var params = []
			for i in range(1, len(l)):
				if regex.search(l[i]):
					params.append(l[i])
				else:
					params.append((\"0x\" + l[i]).hex_to_int())
			code[linenum] = [l[0], params]
		else:
			code[linenum] = [\" \", []]
		if not code[linenum][0]:
			code[linenum][0] = \" \"
	update_display()

# called once on each process-tick
func cpu_process():
	if running:
		var params = code[line][1]
		match code[line][0]:
			\" \":
				line += 1
			\"S\":
				emit_signal(\"set_register\", params[0], params[1])
				line += 1
				update_display()
			\"M\":
				emit_signal(\"set_register\", params[0], registers[params[1]])
				line += 1
				update_display()
			\"+\":
				emit_signal(\"set_register\", params[0], int(fposmod(registers[params[0]] + registers[params[1]], 256)))
				line += 1
			\"-\":
				emit_signal(\"set_register\", params[0], int(fposmod(registers[params[0]] - registers[params[1]], 256)))
				line += 1
			\"*\":
				emit_signal(\"set_register\", params[0], int(fposmod(registers[params[0]] * registers[params[1]], 256)))
				line += 1
			\"/\":
				emit_signal(\"set_register\", params[0], int(fposmod(registers[params[0]] / registers[params[1]], 256)))
				line += 1
			\"J\":
				line = params[0]
			\"=\":
				if registers[params[1]] ==  registers[params[2]]:
					line = params[0]
				else:
					line += 1
			\"!\":
				if registers[params[1]] !=  registers[params[2]]:
					line = params[0]
				else:
					line += 1
			\">\":
				if registers[params[1]] >  registers[params[2]]:
					line = params[0]
				else:
					line += 1
			\"<\":
				if registers[params[1]] <  registers[params[2]]:
					line = params[0]
				else:
					line += 1
			
		line = line % line_count

# get default params for an op
func get_default_params(op):
	match op:
		\" \":
			return []
		\"S\":
			return ['G', 0]
		\"M\":
			return ['G', 'G']
		\"+\":
			return ['G', 'G']
		\"-\":
			return ['G', 'G']
		\"*\":
			return ['G', 'G']
		\"/\":
			return ['G', 'G']
		\"J\":
			return [0]
		\"=\":
			return [0, 'G', 'G']
		\"!\":
			return [0, 'G', 'G']
		\">\":
			return [0, 'G', 'G']
		\"<\":
			return [0, 'G', 'G']

# virtual machine registers
# eventually this will be set externally
var registers = {
	\"G\": 0x00,
	\"H\": 0x00,
	\"I\": 0x00,
	\"J\": 0x00,
	\"K\": 0x00,
	\"L\": 0x00,
	\"M\": 0x00,
	\"N\": 0x00,
	\"O\": 0x00,
	\"P\": 0x00,
	\"Q\": 0x00,
	\"R\": 0x00,
	\"S\": 0x00,
	\"T\": 0x00,
	\"U\": 0x00,
	\"V\": 0x00,
	\"W\": 0x00,
	\"X\": 0x00,
	\"Y\": 0x00,
	\"Z\": 0x00
}

func _ready():
	GameState.set_player_move(false)

var tick:int = 0
func _process(_delta):
	tick += 1
	if tick % speed == 0 and running:
		cpu_process()
		update_display()

var regs = registers.keys()
# inc/dec a register
func cycle_register(current, amount):
	var r = regs.find(current)
	r = int(fposmod(r + amount, regs.size()))
	return regs[r]

# inc/dec a number-field
func cycle_num(current, amount):
	return int(fposmod(current + amount, 256))

func _input(event):
	var direction = 0
	if event.is_action_pressed(\"ui_up\"):
		direction = -1
	elif event.is_action_pressed(\"ui_down\"):
		direction = 1
	if not running:
		if not entering:
			if direction != 0:
				line = int(fposmod(line + direction, line_count))
			elif event.is_action_pressed(\"ui_left\"):
				pos = int(fposmod(pos - 1, 4))
			elif event.is_action_pressed(\"ui_right\"):
				pos = int(fposmod(pos + 1, 4))
		else:
			if direction != 0:
				if pos == 0:
					var op = ops.find(code[line][0])
					code[line][0] = ops[int(fposmod(op + direction, ops.size()))]
					code[line][1] = get_default_params(code[line][0])
				else:
					if code[line][0] == 'J' and pos == 1:
						code[line][1][0] = cycle_num(code[line][1][0], direction)
					elif code[line][0] == 'S':
						if pos == 1:
							code[line][1][0] = cycle_register(code[line][1][0], direction)
						elif pos == 2:
							code[line][1][1] = cycle_num(code[line][1][1], direction)
					elif [\"M\", \"+\", \"-\", \"*\", \"/\"].find(code[line][0]) != -1:
						if pos == 1:
							code[line][1][0] = cycle_register(code[line][1][0], direction)
						elif pos == 2:
							code[line][1][1] = cycle_register(code[line][1][1], direction)
					elif [\"=\", \"!\", \">\", \"<\"].find(code[line][0]) != -1:
						if pos == 1:
							code[line][1][0] = cycle_num(code[line][1][0], direction)
						if pos == 2:
							code[line][1][1] = cycle_register(code[line][1][1], direction)
						elif pos == 3:
							code[line][1][2] = cycle_register(code[line][1][2], direction)
		if event.is_action_pressed(\"ui_accept\"):
			entering = true
		elif event.is_action_released(\"ui_accept\"):
			entering = false
	if event.is_action_pressed(\"ui_select\"):
		emit_signal(\"set_running\", not running)
	if event.is_action_pressed(\"ui_cancel\"):
		# switch scene here
		pass
	update_display()

func _on_Terminal_set_code(code):
	set_code(code)

func _on_Terminal_set_register(register, value):
	registers[register] = value

func _on_Terminal_set_running(r):
	running = r
"

[node name="Terminal" type="Node2D"]
script = SubResource( 2 )

[node name="BG" type="ColorRect" parent="."]
margin_right = 320.0
margin_bottom = 241.0
color = Color( 0, 0, 0, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Code" type="RichTextLabel" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 6.0
margin_top = 3.0
margin_right = 88.0
margin_bottom = 136.0
rect_clip_content = false
custom_fonts/normal_font = ExtResource( 1 )
bbcode_enabled = true
bbcode_text = "O 00 00 00
O 00 00 00 
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00"
text = "O 00 00 00
O 00 00 00 
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00"
scroll_active = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Code2" type="RichTextLabel" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 85.0
margin_top = 3.0
margin_right = 170.0
margin_bottom = 137.0
rect_clip_content = false
custom_fonts/normal_font = ExtResource( 1 )
bbcode_enabled = true
bbcode_text = "O 00 00 00
O 00 00 00 
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00"
text = "O 00 00 00
O 00 00 00 
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00"
scroll_active = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Code3" type="RichTextLabel" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 164.0
margin_top = 2.0
margin_right = 242.0
margin_bottom = 136.0
rect_clip_content = false
custom_fonts/normal_font = ExtResource( 1 )
bbcode_enabled = true
bbcode_text = "O 00 00 00
O 00 00 00 
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00"
text = "O 00 00 00
O 00 00 00 
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00"
scroll_active = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Code4" type="RichTextLabel" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 243.0
margin_top = 2.0
margin_right = 323.0
margin_bottom = 140.0
rect_clip_content = false
custom_fonts/normal_font = ExtResource( 1 )
bbcode_enabled = true
bbcode_text = "O 00 00 00
O 00 00 00 
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00"
text = "O 00 00 00
O 00 00 00 
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00
O 00 00 00"
scroll_active = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="instructions" type="RichTextLabel" parent="."]
margin_left = 3.0
margin_top = 145.0
margin_right = 315.0
margin_bottom = 238.0
rect_clip_content = false
custom_fonts/normal_font = ExtResource( 1 )
bbcode_enabled = true
bbcode_text = "



Use directionals to select position.
Hold A to with directionsals to change.
Press SELECT to run/stop.
Press B to exit.
"
text = "



Use directionals to select position.
Hold A to with directionsals to change.
Press SELECT to run/stop.
Press B to exit.
"
scroll_active = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect" type="ColorRect" parent="."]
margin_left = 79.0
margin_right = 81.0
margin_bottom = 139.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect2" type="ColorRect" parent="."]
margin_left = 157.298
margin_top = -0.271546
margin_right = 159.298
margin_bottom = 138.728
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect3" type="ColorRect" parent="."]
margin_left = 236.975
margin_right = 238.975
margin_bottom = 139.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect4" type="ColorRect" parent="."]
margin_left = -1.0
margin_top = 132.0
margin_right = 319.0
margin_bottom = 142.0
color = Color( 0.968627, 0.968627, 0.968627, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Brand" type="RichTextLabel" parent="."]
margin_left = 2.15047
margin_top = 134.335
margin_right = 75.1505
margin_bottom = 143.335
rect_clip_content = false
custom_fonts/normal_font = ExtResource( 1 )
bbcode_enabled = true
bbcode_text = "Pakémon
"
text = "Pakémon
"
scroll_active = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="PlayIndicator" type="Label" parent="."]
margin_left = 310.0
margin_top = 133.621
margin_right = 318.0
margin_bottom = 141.621
custom_fonts/font = ExtResource( 1 )
text = ">"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="LineIndicator" type="RichTextLabel" parent="."]
margin_left = 0.889618
margin_top = 231.669
margin_right = 59.8896
margin_bottom = 240.669
rect_clip_content = false
custom_fonts/normal_font = ExtResource( 1 )
bbcode_enabled = true
bbcode_text = "XX : X"
text = "XX : X"
scroll_active = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="LineBar" type="ColorRect" parent="."]
margin_top = 2.0
margin_right = 80.0
margin_bottom = 10.0
color = Color( 1, 1, 1, 0.196078 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="PosBar" type="ColorRect" parent="LineBar"]
margin_left = 62.0
margin_right = 76.0
margin_bottom = 8.0
color = Color( 1, 1, 1, 0.196078 )
__meta__ = {
"_edit_use_anchors_": false
}
[connection signal="set_code" from="." to="." method="_on_Terminal_set_code"]
[connection signal="set_register" from="." to="." method="_on_Terminal_set_register"]
[connection signal="set_running" from="." to="." method="_on_Terminal_set_running"]
